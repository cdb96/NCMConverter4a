package com.cdb96.ncmconverter4a;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Objects;

public class KGMConverter {
    static byte[] ownKeyBytes = new byte[17];
    final static byte[] preComputedTable = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 33, 1, 97, 1, 33, 1, -31, 1, 33, 1, 97, 1, 33, 1, -46, 35, 2, 2, 66, 66, 2, 2, -62, -62, 2, 2, 66, 66, 2, 2, -45, -45, 2, 3, 99, 67, 99, 3, -29, -61, -29, 3, 99, 67, 99, 3, -108, -76, -108, 101, 4, 4, 4, 4, -124, -124, -124, -124, 4, 4, 4, 4, -107, -107, -107, -107, 4, 5, 37, 5, -27, -123, -91, -123, -27, 5, 37, 5, -42, -74, -106, -74, -42, 39, 6, 6, -58, -58, -122, -122, -58, -58, 6, 6, -41, -41, -105, -105, -41, -41, 6, 7, -25, -57, -25, -121, -25, -57, -25, 7, 24, 56, 24, 120, 24, 56, 24, -23, 8, 8, 8, 8, 8, 8, 8, 8, 25, 25, 25, 25, 25, 25, 25, 25, 8, 9, 41, 9, 105, 9, 41, 9, -38, 58, 26, 58, 90, 58, 26, 58, -38, 43, 10, 10, 74, 74, 10, 10, -37, -37, 27, 27, 91, 91, 27, 27, -37, -37, 10, 11, 107, 75, 107, 11, -100, -68, -100, 124, 28, 60, 28, 124, -100, -68, -100, 109, 12, 12, 12, 12, -99, -99, -99, -99, 29, 29, 29, 29, -99, -99, -99, -99, 12, 13, 45, 13, -34, -66, -98, -66, -34, 62, 30, 62, -34, -66, -98, -66, -34, 47, 14, 14, -33, -33, -97, -97, -33, -33, 31, 31, -33, -33, -97, -97, -33, -33, 14, 15, 0, 32, 0, 96, 0, 32, 0, -32, 0, 32, 0, 96, 0, 32, 0, -15, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 35, 34, 2, 34, 66, 34, 2, 34, -62, 34, 2, 34, 66, 34, 2, 34, -45, 34, 3, 3, 67, 67, 3, 3, -61, -61, 3, 3, 67, 67, 3, 3, -76, -76, 101, 100, 4, 36, 4, 100, -124, -92, -124, 100, 4, 36, 4, 100, -107, -75, -107, 100, 5, 5, 5, 5, -123, -123, -123, -123, 5, 5, 5, 5, -74, -74, -74, -74, 39, 38, 6, 38, -58, -90, -122, -90, -58, 38, 6, 38, -41, -73, -105, -73, -41, 38, 7, 7, -57, -57, -121, -121, -57, -57, 7, 7, 56, 56, 120, 120, 56, 56, -23, -24, 8, 40, 8, 104, 8, 40, 8, -24, 25, 57, 25, 121, 25, 57, 25, -24, 9, 9, 9, 9, 9, 9, 9, 9, 58, 58, 58, 58, 58, 58, 58, 58, 43, 42, 10, 42, 74, 42, 10, 42, -37, 59, 27, 59, 91, 59, 27, 59, -37, 42, 11, 11, 75, 75, 11, 11, -68, -68, 124, 124, 60, 60, 124, 124, -68, -68, 109, 108, 12, 44, 12, 108, -99, -67, -99, 125, 29, 61, 29, 125, -99, -67, -99, 108, 13, 13, 13, 13, -66, -66, -66, -66, 62, 62, 62, 62, -66, -66, -66, -66, 47, 46, 14, 46, -33, -65, -97, -65, -33, 63, 31, 63, -33, -65, -97, -65, -33, 46, 15, 15, 0, 0, 64, 64, 0, 0, -64, -64, 0, 0, 64, 64, 0, 0, -47, -48, 33, 1, 33, 65, 33, 1, 33, -63, 33, 1, 33, 65, 33, 1, 33, -48, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 35, 3, 99, 3, 35, 3, -29, 3, 35, 3, 99, 3, 35, 3, -108, 101, 68, 68, 4, 4, 68, 68, -124, -124, 68, 68, 4, 4, 68, 68, -107, -107, 68, 69, 37, 5, 37, 69, -91, -123, -91, 69, 37, 5, 37, 69, -106, -74, -106, 103, 6, 6, 6, 6, -122, -122, -122, -122, 6, 6, 6, 6, -105, -105, -105, -105, 6, 7, 39, 7, -25, -121, -89, -121, -25, 7, 39, 7, 24, 120, 88, 120, 24, -23, -56, -56, 8, 8, 72, 72, 8, 8, -56, -56, 25, 25, 89, 89, 25, 25, -56, -55, 41, 9, 41, 73, 41, 9, 41, -55, 26, 58, 26, 122, 26, 58, 26, -21, 10, 10, 10, 10, 10, 10, 10, 10, 27, 27, 27, 27, 27, 27, 27, 27, 10, 11, 43, 11, 107, 11, 43, 11, -100, 124, 92, 124, 28, 124, 92, 124, -100, 109, 76, 76, 12, 12, 76, 76, -99, -99, 93, 93, 29, 29, 93, 93, -99, -99, 76, 77, 45, 13, 45, 77, -98, -66, -98, 126, 30, 62, 30, 126, -98, -66, -98, 111, 14, 14, 14, 14, -97, -97, -97, -97, 31, 31, 31, 31, -97, -97, -97, -97, 14, 15, 47, 15, 0, 96, 64, 96, 0, -32, -64, -32, 0, 96, 64, 96, 0, -15, -48, -48, 1, 1, 65, 65, 1, 1, -63, -63, 1, 1, 65, 65, 1, 1, -48, -47, 2, 34, 2, 98, 2, 34, 2, -30, 2, 34, 2, 98, 2, 34, 2, -13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 101, 100, 68, 100, 4, 100, 68, 100, -124, 100, 68, 100, 4, 100, 68, 100, -107, 100, 69, 69, 5, 5, 69, 69, -123, -123, 69, 69, 5, 5, 69, 69, -74, -74, 103, 102, 6, 38, 6, 102, -122, -90, -122, 102, 6, 38, 6, 102, -105, -73, -105, 102, 7, 7, 7, 7, -121, -121, -121, -121, 7, 7, 7, 7, 120, 120, 120, 120, -23, -24, -56, -24, 8, 104, 72, 104, 8, -24, -56, -24, 25, 121, 89, 121, 25, -24, -55, -55, 9, 9, 73, 73, 9, 9, -55, -55, 58, 58, 122, 122, 58, 58, -21, -22, 10, 42, 10, 106, 10, 42, 10, -22, 27, 59, 27, 123, 27, 59, 27, -22, 11, 11, 11, 11, 11, 11, 11, 11, 124, 124, 124, 124, 124, 124, 124, 124, 109, 108, 76, 108, 12, 108, 76, 108, -99, 125, 93, 125, 29, 125, 93, 125, -99, 108, 77, 77, 13, 13, 77, 77, -66, -66, 126, 126, 62, 62, 126, 126, -66, -66, 111, 110, 14, 46, 14, 110, -97, -65, -97, 127, 31, 63, 31, 127, -97, -65, -97, 110, 15, 15, 15, 15, 0, 0, 0, 0, -128, -128, -128, -128, 0, 0, 0, 0, -111, -112, -80, -112, 97, 1, 33, 1, 97, -127, -95, -127, 97, 1, 33, 1, 97, -112, -79, -79, 66, 66, 2, 2, 66, 66, -126, -126, 66, 66, 2, 2, 66, 66, -109, -110, 99, 67, 99, 3, 99, 67, 99, -125, 99, 67, 99, 3, 99, 67, 99, -110, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 37, 5, 101, 5, 37, 5, -27, 5, 37, 5, 101, 5, 37, 5, -42, 39, 6, 6, 70, 70, 6, 6, -58, -58, 6, 6, 70, 70, 6, 6, -41, -41, 6, 7, 103, 71, 103, 7, -25, -57, -25, 7, 103, 71, 103, 7, 24, 56, 24, -23, -120, -120, -120, -120, 8, 8, 8, 8, -120, -120, -120, -120, 25, 25, 25, 25, -120, -119, -87, -119, 105, 9, 41, 9, 105, -119, -87, -119, 90, 58, 26, 58, 90, -85, -118, -118, 74, 74, 10, 10, 74, 74, -118, -118, 91, 91, 27, 27, 91, 91, -118, -117, 107, 75, 107, 11, 107, 75, 107, -117, 28, 60, 28, 124, 28, 60, 28, -19, 12, 12, 12, 12, 12, 12, 12, 12, 29, 29, 29, 29, 29, 29, 29, 29, 12, 13, 45, 13, 109, 13, 45, 13, -34, 62, 30, 62, 94, 62, 30, 62, -34, 47, 14, 14, 78, 78, 14, 14, -33, -33, 31, 31, 95, 95, 31, 31, -33, -33, 14, 15, 111, 79, 111, 15, 0, 32, 0, -32, -128, -96, -128, -32, 0, 32, 0, -15, -112, -112, -112, -112, 1, 1, 1, 1, -127, -127, -127, -127, 1, 1, 1, 1, -112, -111, -79, -111, 66, 34, 2, 34, 66, -94, -126, -94, 66, 34, 2, 34, 66, -77, -110, -110, 67, 67, 3, 3, 67, 67, -125, -125, 67, 67, 3, 3, 67, 67, -110, -109, 4, 36, 4, 100, 4, 36, 4, -28, 4, 36, 4, 100, 4, 36, 4, -11, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 39, 38, 6, 38, 70, 38, 6, 38, -58, 38, 6, 38, 70, 38, 6, 38, -41, 38, 7, 7, 71, 71, 7, 7, -57, -57, 7, 7, 71, 71, 7, 7, 56, 56, -23, -24, -120, -88, -120, -24, 8, 40, 8, -24, -120, -88, -120, -24, 25, 57, 25, -24, -119, -119, -119, -119, 9, 9, 9, 9, -119, -119, -119, -119, 58, 58, 58, 58, -85, -86, -118, -86, 74, 42, 10, 42, 74, -86, -118, -86, 91, 59, 27, 59, 91, -86, -117, -117, 75, 75, 11, 11, 75, 75, -117, -117, 60, 60, 124, 124, 60, 60, -19, -20, 12, 44, 12, 108, 12, 44, 12, -20, 29, 61, 29, 125, 29, 61, 29, -20, 13, 13, 13, 13, 13, 13, 13, 13, 62, 62, 62, 62, 62, 62, 62, 62, 47, 46, 14, 46, 78, 46, 14, 46, -33, 63, 31, 63, 95, 63, 31, 63, -33, 46, 15, 15, 79, 79, 15, 15, 0, 0, -64, -64, -128, -128, -64, -64, 0, 0, -47, -48, -80, -112, -80, -48, 33, 1, 33, -63, -95, -127, -95, -63, 33, 1, 33, -48, -79, -79, -79, -79, 2, 2, 2, 2, -126, -126, -126, -126, 2, 2, 2, 2, -109, -110, -78, -110, 99, 3, 35, 3, 99, -125, -93, -125, 99, 3, 35, 3, 99, -110, -77, -77, 4, 4, 68, 68, 4, 4, -60, -60, 4, 4, 68, 68, 4, 4, -43, -44, 37, 5, 37, 69, 37, 5, 37, -59, 37, 5, 37, 69, 37, 5, 37, -44, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 39, 7, 103, 7, 39, 7, -25, 7, 39, 7, 103, 7, 39, 7, 24, -23, -56, -56, -120, -120, -56, -56, 8, 8, -56, -56, -120, -120, -56, -56, 25, 25, -56, -55, -87, -119, -87, -55, 41, 9, 41, -55, -87, -119, -87, -55, 26, 58, 26, -21, -118, -118, -118, -118, 10, 10, 10, 10, -118, -118, -118, -118, 27, 27, 27, 27, -118, -117, -85, -117, 107, 11, 43, 11, 107, -117, -85, -117, 28, 124, 92, 124, 28, -19, -52, -52, 12, 12, 76, 76, 12, 12, -52, -52, 29, 29, 93, 93, 29, 29, -52, -51, 45, 13, 45, 77, 45, 13, 45, -51, 30, 62, 30, 126, 30, 62, 30, -17, 14, 14, 14, 14, 14, 14, 14, 14, 31, 31, 31, 31, 31, 31, 31, 31, 14, 15, 47, 15, 111, 15, 47, 15, 0, -32, -64, -32, -128, -32, -64, -32, 0, -15, -48, -48, -112, -112, -48, -48, 1, 1, -63, -63, -127, -127, -63, -63, 1, 1, -48, -47, -79, -111, -79, -47, 2, 34, 2, -30, -126, -94, -126, -30, 2, 34, 2, -13, -110, -110, -110, -110, 3, 3, 3, 3, -125, -125, -125, -125, 3, 3, 3, 3, -110, -109, -77, -109, 4, 100, 68, 100, 4, -28, -60, -28, 4, 100, 68, 100, 4, -11, -44, -44, 5, 5, 69, 69, 5, 5, -59, -59, 5, 5, 69, 69, 5, 5, -44, -43, 6, 38, 6, 102, 6, 38, 6, -26, 6, 38, 6, 102, 6, 38, 6, -9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, -23, -24, -56, -24, -120, -24, -56, -24, 8, -24, -56, -24, -120, -24, -56, -24, 25, -24, -55, -55, -119, -119, -55, -55, 9, 9, -55, -55, -119, -119, -55, -55, 58, 58, -21, -22, -118, -86, -118, -22, 10, 42, 10, -22, -118, -86, -118, -22, 27, 59, 27, -22, -117, -117, -117, -117, 11, 11, 11, 11, -117, -117, -117, -117, 124, 124, 124, 124, -19, -20, -52, -20, 12, 108, 76, 108, 12, -20, -52, -20, 29, 125, 93, 125, 29, -20, -51, -51, 13, 13, 77, 77, 13, 13, -51, -51, 62, 62, 126, 126, 62, 62, -17, -18, 14, 46, 14, 110, 14, 46, 14, -18, 31, 63, 31, 127, 31, 63, 31, -18, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 48, 16, 112, 16, 48, 16, -31, 1, 33, 1, 97, 1, 33, 1, -31, 16, 49, 49, 113, 113, 49, 49, -62, -62, 2, 2, 66, 66, 2, 2, -62, -62, 19, 18, 114, 82, 114, 18, -29, -61, -29, 3, 99, 67, 99, 3, -29, -61, -29, 18, 115, 115, 115, 115, -124, -124, -124, -124, 4, 4, 4, 4, -124, -124, -124, -124, 21, 20, 52, 20, -27, -123, -91, -123, -27, 5, 37, 5, -27, -123, -91, -123, -27, 20, 53, 53, -58, -58, -122, -122, -58, -58, 6, 6, -58, -58, -122, -122, -58, -58, 23, 22, -25, -57, -25, -121, -25, -57, -25, 7, -25, -57, -25, -121, -25, -57, -25, 22, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 41, 9, 105, 9, 41, 9, -23, 9, 41, 9, 105, 9, 41, 9, -38, 43, 10, 10, 74, 74, 10, 10, -54, -54, 10, 10, 74, 74, 10, 10, -37, -37, 10, 11, 107, 75, 107, 11, -21, -53, -21, 11, 107, 75, 107, 11, -100, -68, -100, 109, 12, 12, 12, 12, -116, -116, -116, -116, 12, 12, 12, 12, -99, -99, -99, -99, 12, 13, 45, 13, -19, -115, -83, -115, -19, 13, 45, 13, -34, -66, -98, -66, -34, 47, 14, 14, -50, -50, -114, -114, -50, -50, 14, 14, -33, -33, -97, -97, -33, -33, 14, 15, -17, -49, -17, -113, -17, -49, -17, 15, 0, 32, 0, 96, 0, 32, 0, -15, 16, 16, 16, 16, 16, 16, 16, 16, 1, 1, 1, 1, 1, 1, 1, 1, 16, 17, 49, 17, 113, 17, 49, 17, -62, 34, 2, 34, 66, 34, 2, 34, -62, 51, 18, 18, 82, 82, 18, 18, -61, -61, 3, 3, 67, 67, 3, 3, -61, -61, 18, 19, 115, 83, 115, 19, -124, -92, -124, 100, 4, 36, 4, 100, -124, -92, -124, 117, 20, 20, 20, 20, -123, -123, -123, -123, 5, 5, 5, 5, -123, -123, -123, -123, 20, 21, 53, 21, -58, -90, -122, -90, -58, 38, 6, 38, -58, -90, -122, -90, -58, 55, 22, 22, -57, -57, -121, -121, -57, -57, 7, 7, -57, -57, -121, -121, -57, -57, 22, 23, 8, 40, 8, 104, 8, 40, 8, -24, 8, 40, 8, 104, 8, 40, 8, -7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 43, 42, 10, 42, 74, 42, 10, 42, -54, 42, 10, 42, 74, 42, 10, 42, -37, 42, 11, 11, 75, 75, 11, 11, -53, -53, 11, 11, 75, 75, 11, 11, -68, -68, 109, 108, 12, 44, 12, 108, -116, -84, -116, 108, 12, 44, 12, 108, -99, -67, -99, 108, 13, 13, 13, 13, -115, -115, -115, -115, 13, 13, 13, 13, -66, -66, -66, -66, 47, 46, 14, 46, -50, -82, -114, -82, -50, 46, 14, 46, -33, -65, -97, -65, -33, 46, 15, 15, -49, -49, -113, -113, -49, -49, 15, 15, 0, 0, 64, 64, 0, 0, -47, -48, 48, 16, 48, 80, 48, 16, 48, -48, 33, 1, 33, 65, 33, 1, 33, -48, 49, 49, 49, 49, 49, 49, 49, 49, 2, 2, 2, 2, 2, 2, 2, 2, 19, 18, 50, 18, 114, 18, 50, 18, -29, 3, 35, 3, 99, 3, 35, 3, -29, 18, 51, 51, 115, 115, 51, 51, -124, -124, 68, 68, 4, 4, 68, 68, -124, -124, 85, 84, 52, 20, 52, 84, -91, -123, -91, 69, 37, 5, 37, 69, -91, -123, -91, 84, 53, 53, 53, 53, -122, -122, -122, -122, 6, 6, 6, 6, -122, -122, -122, -122, 23, 22, 54, 22, -25, -121, -89, -121, -25, 7, 39, 7, -25, -121, -89, -121, -25, 22, 55, 55, 8, 8, 72, 72, 8, 8, -56, -56, 8, 8, 72, 72, 8, 8, -39, -40, 41, 9, 41, 73, 41, 9, 41, -55, 41, 9, 41, 73, 41, 9, 41, -40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 43, 11, 107, 11, 43, 11, -21, 11, 43, 11, 107, 11, 43, 11, -100, 109, 76, 76, 12, 12, 76, 76, -116, -116, 76, 76, 12, 12, 76, 76, -99, -99, 76, 77, 45, 13, 45, 77, -83, -115, -83, 77, 45, 13, 45, 77, -98, -66, -98, 111, 14, 14, 14, 14, -114, -114, -114, -114, 14, 14, 14, 14, -97, -97, -97, -97, 14, 15, 47, 15, -17, -113, -81, -113, -17, 15, 47, 15, 0, 96, 64, 96, 0, -15, -48, -48, 16, 16, 80, 80, 16, 16, -48, -48, 1, 1, 65, 65, 1, 1, -48, -47, 49, 17, 49, 81, 49, 17, 49, -47, 2, 34, 2, 98, 2, 34, 2, -13, 18, 18, 18, 18, 18, 18, 18, 18, 3, 3, 3, 3, 3, 3, 3, 3, 18, 19, 51, 19, 115, 19, 51, 19, -124, 100, 68, 100, 4, 100, 68, 100, -124, 117, 84, 84, 20, 20, 84, 84, -123, -123, 69, 69, 5, 5, 69, 69, -123, -123, 84, 85, 53, 21, 53, 85, -122, -90, -122, 102, 6, 38, 6, 102, -122, -90, -122, 119, 22, 22, 22, 22, -121, -121, -121, -121, 7, 7, 7, 7, -121, -121, -121, -121, 22, 23, 55, 23, 8, 104, 72, 104, 8, -24, -56, -24, 8, 104, 72, 104, 8, -7, -40, -40, 9, 9, 73, 73, 9, 9, -55, -55, 9, 9, 73, 73, 9, 9, -40, -39, 10, 42, 10, 106, 10, 42, 10, -22, 10, 42, 10, 106, 10, 42, 10, -5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 109, 108, 76, 108, 12, 108, 76, 108, -116, 108, 76, 108, 12, 108, 76, 108, -99, 108, 77, 77, 13, 13, 77, 77, -115, -115, 77, 77, 13, 13, 77, 77, -66, -66, 111, 110, 14, 46, 14, 110, -114, -82, -114, 110, 14, 46, 14, 110, -97, -65, -97, 110, 15, 15, 15, 15, -113, -113, -113, -113, 15, 15, 15, 15, 0, 0, 0, 0, -111, -112, -80, -112, 112, 16, 48, 16, 112, -112, -80, -112, 97, 1, 33, 1, 97, -112, -79, -79, 113, 113, 49, 49, 113, 113, -79, -79, 66, 66, 2, 2, 66, 66, -109, -110, 114, 82, 114, 18, 114, 82, 114, -110, 99, 67, 99, 3, 99, 67, 99, -110, 115, 115, 115, 115, 115, 115, 115, 115, 4, 4, 4, 4, 4, 4, 4, 4, 21, 20, 52, 20, 116, 20, 52, 20, -27, 5, 37, 5, 101, 5, 37, 5, -27, 20, 53, 53, 117, 117, 53, 53, -58, -58, 6, 6, 70, 70, 6, 6, -58, -58, 23, 22, 118, 86, 118, 22, -25, -57, -25, 7, 103, 71, 103, 7, -25, -57, -25, 22, 119, 119, 119, 119, 8, 8, 8, 8, -120, -120, -120, -120, 8, 8, 8, 8, -103, -104, -72, -104, 105, 9, 41, 9, 105, -119, -87, -119, 105, 9, 41, 9, 105, -104, -71, -71, 74, 74, 10, 10, 74, 74, -118, -118, 74, 74, 10, 10, 74, 74, -101, -102, 107, 75, 107, 11, 107, 75, 107, -117, 107, 75, 107, 11, 107, 75, 107, -102, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 45, 13, 109, 13, 45, 13, -19, 13, 45, 13, 109, 13, 45, 13, -34, 47, 14, 14, 78, 78, 14, 14, -50, -50, 14, 14, 78, 78, 14, 14, -33, -33, 14, 15, 111, 79, 111, 15, -17, -49, -17, 15, 111, 79, 111, 15, 0, 32, 0, -15, -112, -112, -112, -112, 16, 16, 16, 16, -112, -112, -112, -112, 1, 1, 1, 1, -112, -111, -79, -111, 113, 17, 49, 17, 113, -111, -79, -111, 66, 34, 2, 34, 66, -77, -110, -110, 82, 82, 18, 18, 82, 82, -110, -110, 67, 67, 3, 3, 67, 67, -110, -109, 115, 83, 115, 19, 115, 83, 115, -109, 4, 36, 4, 100, 4, 36, 4, -11, 20, 20, 20, 20, 20, 20, 20, 20, 5, 5, 5, 5, 5, 5, 5, 5, 20, 21, 53, 21, 117, 21, 53, 21, -58, 38, 6, 38, 70, 38, 6, 38, -58, 55, 22, 22, 86, 86, 22, 22, -57, -57, 7, 7, 71, 71, 7, 7, -57, -57, 22, 23, 119, 87, 119, 23, 8, 40, 8, -24, -120, -88, -120, -24, 8, 40, 8, -7, -104, -104, -104, -104, 9, 9, 9, 9, -119, -119, -119, -119, 9, 9, 9, 9, -104, -103, -71, -103, 74, 42, 10, 42, 74, -86, -118, -86, 74, 42, 10, 42, 74, -69, -102, -102, 75, 75, 11, 11, 75, 75, -117, -117, 75, 75, 11, 11, 75, 75, -102, -101, 12, 44, 12, 108, 12, 44, 12, -20, 12, 44, 12, 108, 12, 44, 12, -3, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 47, 46, 14, 46, 78, 46, 14, 46, -50, 46, 14, 46, 78, 46, 14, 46, -33, 46, 15, 15, 79, 79, 15, 15, -49, -49, 15, 15, 79, 79, 15, 15, 0, 0, -47, -48, -80, -112, -80, -48, 48, 16, 48, -48, -80, -112, -80, -48, 33, 1, 33, -48, -79, -79, -79, -79, 49, 49, 49, 49, -79, -79, -79, -79, 2, 2, 2, 2, -109, -110, -78, -110, 114, 18, 50, 18, 114, -110, -78, -110, 99, 3, 35, 3, 99, -110, -77, -77, 115, 115, 51, 51, 115, 115, -77, -77, 4, 4, 68, 68, 4, 4, -43, -44, 52, 20, 52, 84, 52, 20, 52, -44, 37, 5, 37, 69, 37, 5, 37, -44, 53, 53, 53, 53, 53, 53, 53, 53, 6, 6, 6, 6, 6, 6, 6, 6, 23, 22, 54, 22, 118, 22, 54, 22, -25, 7, 39, 7, 103, 7, 39, 7, -25, 22, 55, 55, 119, 119, 55, 55, 8, 8, -56, -56, -120, -120, -56, -56, 8, 8, -39, -40, -72, -104, -72, -40, 41, 9, 41, -55, -87, -119, -87, -55, 41, 9, 41, -40, -71, -71, -71, -71, 10, 10, 10, 10, -118, -118, -118, -118, 10, 10, 10, 10, -101, -102, -70, -102, 107, 11, 43, 11, 107, -117, -85, -117, 107, 11, 43, 11, 107, -102, -69, -69, 12, 12, 76, 76, 12, 12, -52, -52, 12, 12, 76, 76, 12, 12, -35, -36, 45, 13, 45, 77, 45, 13, 45, -51, 45, 13, 45, 77, 45, 13, 45, -36, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 47, 15, 111, 15, 47, 15, -17, 15, 47, 15, 111, 15, 47, 15, 0, -15, -48, -48, -112, -112, -48, -48, 16, 16, -48, -48, -112, -112, -48, -48, 1, 1, -48, -47, -79, -111, -79, -47, 49, 17, 49, -47, -79, -111, -79, -47, 2, 34, 2, -13, -110, -110, -110, -110, 18, 18, 18, 18, -110, -110, -110, -110, 3, 3, 3, 3, -110, -109, -77, -109, 115, 19, 51, 19, 115, -109, -77, -109, 4, 100, 68, 100, 4, -11, -44, -44, 20, 20, 84, 84, 20, 20, -44, -44, 5, 5, 69, 69, 5, 5, -44, -43, 53, 21, 53, 85, 53, 21, 53, -43, 6, 38, 6, 102, 6, 38, 6, -9, 22, 22, 22, 22, 22, 22, 22, 22, 7, 7, 7, 7, 7, 7, 7, 7, 22, 23, 55, 23, 119, 23, 55, 23, 8, -24, -56, -24, -120, -24, -56, -24, 8, -7, -40, -40, -104, -104, -40, -40, 9, 9, -55, -55, -119, -119, -55, -55, 9, 9, -40, -39, -71, -103, -71, -39, 10, 42, 10, -22, -118, -86, -118, -22, 10, 42, 10, -5, -102, -102, -102, -102, 11, 11, 11, 11, -117, -117, -117, -117, 11, 11, 11, 11, -102, -101, -69, -101, 12, 108, 76, 108, 12, -20, -52, -20, 12, 108, 76, 108, 12, -3, -36, -36, 13, 13, 77, 77, 13, 13, -51, -51, 13, 13, 77, 77, 13, 13, -36, -35, 14, 46, 14, 110, 14, 46, 14, -18, 14, 46, 14, 110, 14, 46, 14, -1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 1, 33, 1, 97, 1, 33, 1, -31, 1, 33, 1, 97, 1, 33, 1, -16, 1, 32, 32, 96, 96, 32, 32, -32, -32, 32, 32, 96, 96, 32, 32, -45, -45, 2, 3, 99, 67, 99, 3, -29, -61, -29, 3, 99, 67, 99, 3, -14, -46, -14, 3, 98, 98, 98, 98, -30, -30, -30, -30, 98, 98, 98, 98, -107, -107, -107, -107, 4, 5, 37, 5, -27, -123, -91, -123, -27, 5, 37, 5, -12, -108, -76, -108, -12, 5, 36, 36, -28, -28, -92, -92, -28, -28, 36, 36, -41, -41, -105, -105, -41, -41, 6, 7, -25, -57, -25, -121, -25, -57, -25, 7, -10, -42, -10, -106, -10, -42, -10, 7, -26, -26, -26, -26, -26, -26, -26, -26, 25, 25, 25, 25, 25, 25, 25, 25, 8, 9, 41, 9, 105, 9, 41, 9, -8, 24, 56, 24, 120, 24, 56, 24, -8, 9, 40, 40, 104, 104, 40, 40, -37, -37, 27, 27, 91, 91, 27, 27, -37, -37, 10, 11, 107, 75, 107, 11, -6, -38, -6, 26, 122, 90, 122, 26, -6, -38, -6, 11, 106, 106, 106, 106, -99, -99, -99, -99, 29, 29, 29, 29, -99, -99, -99, -99, 12, 13, 45, 13, -4, -100, -68, -100, -4, 28, 60, 28, -4, -100, -68, -100, -4, 13, 44, 44, -33, -33, -97, -97, -33, -33, 31, 31, -33, -33, -97, -97, -33, -33, 14, 15, -2, -34, -2, -98, -2, -34, -2, 30, -2, -34, -2, -98, -2, -34, -2, 15};

    final static byte[] MaskV2PreDef = {
            (byte)0xB8, (byte)0xD5, (byte)0x3D, (byte)0xB2, (byte)0xE9, (byte)0xAF, (byte)0x78, (byte)0x8C, (byte)0x83, (byte)0x33, (byte)0x71, (byte)0x51, (byte)0x76, (byte)0xA0, (byte)0xCD, (byte)0x37,
            (byte)0x2F, (byte)0x3E, (byte)0x35, (byte)0x8D, (byte)0xA9, (byte)0xBE, (byte)0x98, (byte)0xB7, (byte)0xE7, (byte)0x8C, (byte)0x22, (byte)0xCE, (byte)0x5A, (byte)0x61, (byte)0xDF, (byte)0x68,
            (byte)0x69, (byte)0x89, (byte)0xFE, (byte)0xA5, (byte)0xB6, (byte)0xDE, (byte)0xA9, (byte)0x77, (byte)0xFC, (byte)0xC8, (byte)0xBD, (byte)0xBD, (byte)0xE5, (byte)0x6D, (byte)0x3E, (byte)0x5A,
            (byte)0x36, (byte)0xEF, (byte)0x69, (byte)0x4E, (byte)0xBE, (byte)0xE1, (byte)0xE9, (byte)0x66, (byte)0x1C, (byte)0xF3, (byte)0xD9, (byte)0x02, (byte)0xB6, (byte)0xF2, (byte)0x12, (byte)0x9B,
            (byte)0x44, (byte)0xD0, (byte)0x6F, (byte)0xB9, (byte)0x35, (byte)0x89, (byte)0xB6, (byte)0x46, (byte)0x6D, (byte)0x73, (byte)0x82, (byte)0x06, (byte)0x69, (byte)0xC1, (byte)0xED, (byte)0xD7,
            (byte)0x85, (byte)0xC2, (byte)0x30, (byte)0xDF, (byte)0xA2, (byte)0x62, (byte)0xBE, (byte)0x79, (byte)0x2D, (byte)0x62, (byte)0x62, (byte)0x3D, (byte)0x0D, (byte)0x7E, (byte)0xBE, (byte)0x48,
            (byte)0x89, (byte)0x23, (byte)0x02, (byte)0xA0, (byte)0xE4, (byte)0xD5, (byte)0x75, (byte)0x51, (byte)0x32, (byte)0x02, (byte)0x53, (byte)0xFD, (byte)0x16, (byte)0x3A, (byte)0x21, (byte)0x3B,
            (byte)0x16, (byte)0x0F, (byte)0xC3, (byte)0xB2, (byte)0xBB, (byte)0xB3, (byte)0xE2, (byte)0xBA, (byte)0x3A, (byte)0x3D, (byte)0x13, (byte)0xEC, (byte)0xF6, (byte)0x01, (byte)0x45, (byte)0x84,
            (byte)0xA5, (byte)0x70, (byte)0x0F, (byte)0x93, (byte)0x49, (byte)0x0C, (byte)0x64, (byte)0xCD, (byte)0x31, (byte)0xD5, (byte)0xCC, (byte)0x4C, (byte)0x07, (byte)0x01, (byte)0x9E, (byte)0x00,
            (byte)0x1A, (byte)0x23, (byte)0x90, (byte)0xBF, (byte)0x88, (byte)0x1E, (byte)0x3B, (byte)0xAB, (byte)0xA6, (byte)0x3E, (byte)0xC4, (byte)0x73, (byte)0x47, (byte)0x10, (byte)0x7E, (byte)0x3B,
            (byte)0x5E, (byte)0xBC, (byte)0xE3, (byte)0x00, (byte)0x84, (byte)0xFF, (byte)0x09, (byte)0xD4, (byte)0xE0, (byte)0x89, (byte)0x0F, (byte)0x5B, (byte)0x58, (byte)0x70, (byte)0x4F, (byte)0xFB,
            (byte)0x65, (byte)0xD8, (byte)0x5C, (byte)0x53, (byte)0x1B, (byte)0xD3, (byte)0xC8, (byte)0xC6, (byte)0xBF, (byte)0xEF, (byte)0x98, (byte)0xB0, (byte)0x50, (byte)0x4F, (byte)0x0F, (byte)0xEA,
            (byte)0xE5, (byte)0x83, (byte)0x58, (byte)0x8C, (byte)0x28, (byte)0x2C, (byte)0x84, (byte)0x67, (byte)0xCD, (byte)0xD0, (byte)0x9E, (byte)0x47, (byte)0xDB, (byte)0x27, (byte)0x50, (byte)0xCA,
            (byte)0xF4, (byte)0x63, (byte)0x63, (byte)0xE8, (byte)0x97, (byte)0x7F, (byte)0x1B, (byte)0x4B, (byte)0x0C, (byte)0xC2, (byte)0xC1, (byte)0x21, (byte)0x4C, (byte)0xCC, (byte)0x58, (byte)0xF5,
            (byte)0x94, (byte)0x52, (byte)0xA3, (byte)0xF3, (byte)0xD3, (byte)0xE0, (byte)0x68, (byte)0xF4, (byte)0x00, (byte)0x23, (byte)0xF3, (byte)0x5E, (byte)0x0A, (byte)0x7B, (byte)0x93, (byte)0xDD,
            (byte)0xAB, (byte)0x12, (byte)0xB2, (byte)0x13, (byte)0xE8, (byte)0x84, (byte)0xD7, (byte)0xA7, (byte)0x9F, (byte)0x0F, (byte)0x32, (byte)0x4C, (byte)0x55, (byte)0x1D, (byte)0x04, (byte)0x36,
            (byte)0x52, (byte)0xDC, (byte)0x03, (byte)0xF3, (byte)0xF9, (byte)0x4E, (byte)0x42, (byte)0xE9, (byte)0x3D, (byte)0x61, (byte)0xEF, (byte)0x7C, (byte)0xB6, (byte)0xB3, (byte)0x93, (byte)0x50,
    };
    public static boolean KGMDetect(InputStream inputStream) throws Exception {
        final byte[] KGMMagicHeader = {0x7c, (byte) 0xd5,0x32, (byte) 0xeb, (byte) 0x86,0x02,0x7f,0x4b, (byte) 0xa8, (byte) 0xaf, (byte) 0xa6, (byte) 0x8e,0x0f, (byte) 0xff, (byte) 0x99,0x14};
        byte[] fileHeader = new byte[16];
        inputStream.read(fileHeader,0,16);
        if (Arrays.equals(fileHeader, KGMMagicHeader)) {
            System.out.println("KGM file detected");
            return true;
        } else {
            System.out.println("KGM file not detected");
            return false;
        }
    }

    public static int decrypt(byte[] ownKeyBytes,byte[] cipherDataBytes,byte[] keyBytes,int offset,int bytesRead) {
        int i = offset;
        //简化取模运算
        int genMaskCounter = offset % 69632;
        int MaskV2Counter = offset % 272;
        int keyBytesIndexCounter = (offset >> 4) % 4352;

        for (int j = 0; j < bytesRead; ++i,++j) {
            int med8 = ownKeyBytes[i % 17] ^ cipherDataBytes[j];
            med8 ^= (med8 & 0xf) << 4;

            if ( genMaskCounter == 69632 ) {
                genMask2(keyBytes,i);
                genMaskCounter = 0;
            }
            if (MaskV2Counter == 272) {
                MaskV2Counter = 0;
            }
            if (j > 0 && (i & 15) == 0) {
                keyBytesIndexCounter++;
                if (keyBytesIndexCounter == 4352) {
                    keyBytesIndexCounter = 0;
                }
            }

            int msk8 = keyBytes[keyBytesIndexCounter] ^ MaskV2PreDef[MaskV2Counter];
            msk8 ^= (msk8 & 0xf) << 4;
            cipherDataBytes[j] = (byte) (med8 ^ msk8);

            genMaskCounter++;
            MaskV2Counter++;
        }
        return i;
    }
    public static void write(InputStream inputStream, OutputStream outputStream,String format,int initOffset) throws Exception {
        int bufferSize = 8 * 1024 * 1024;
        if (bufferSize > inputStream.available()) {
            bufferSize = inputStream.available();
        }

        byte[] buffer = new byte[bufferSize];
        if (Objects.equals(format, "flac")) {
            outputStream.write(0x66);
        } else if (Objects.equals(format, "mp3")) {
            outputStream.write(0x49);
        }

        int pos = initOffset;
        byte[] keyBytes = new byte[4352];
        genMask2(keyBytes, 0);
        int bytesRead;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            pos = decrypt(ownKeyBytes, buffer, keyBytes, pos, bytesRead);
            outputStream.write(buffer,0,bytesRead);
        }
    }

    public static String detectFormat(InputStream inputStream) throws Exception {
        byte[] headerLengthBytes = new byte[4];

        inputStream.read(headerLengthBytes, 0, 4);
        inputStream.skip(8);
        inputStream.read(ownKeyBytes, 0, 17);
        ownKeyBytes[16] = 0;

        int headerLength = LengthUtils.getLittleEndianInteger(headerLengthBytes);
        inputStream.skip(headerLength - 17 - 8 - 4 - 16);

        byte[] formatIdentifier = new byte[1];
        byte[] keyBytes = {0};
        inputStream.read(formatIdentifier, 0, 1);
        int med8 = ownKeyBytes[0] ^ formatIdentifier[0];
        med8 ^= (med8 & 0xf) << 4;
        int msk8 = keyBytes[0] ^ MaskV2PreDef[0];
        msk8 ^= (msk8 & 0xf) << 4;
        formatIdentifier[0] = (byte) (med8 ^ msk8);
        if (formatIdentifier[0] == 0x66) {
            return "flac";
        } else if (formatIdentifier[0] == 0x49) {
            return "mp3";
        }
        return "";
    }

    public static void genMask2(byte[] keyBytes,int startPos) {
        for (int pos = 0; pos < 4352 * 16; pos += 16) {
            int i = startPos + pos;
            i >>= 4;
            int med8 = preComputedTable[i % 4352];
            i >>= 8; // preComputedTable已经包含第一次循环的值
            while (i >= 0x11) {
                med8 ^= preComputedTable[i % 4352];
                i >>= 8;
            }
            keyBytes[pos >> 4] = (byte) med8;
        }
    }
}
