package com.cdb96.ncmconverter4a;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Objects;

public class KGMConverter {
    static byte[] ownKeyBytes = new byte[17];
    final static byte[] table1 = {(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x01, (byte)0x21, (byte)0x01, (byte)0x61, (byte)0x01, (byte)0x21, (byte)0x01, (byte)0xe1, (byte)0x01, (byte)0x21, (byte)0x01, (byte)0x61, (byte)0x01, (byte)0x21, (byte)0x01,
            (byte)0xd2, (byte)0x23, (byte)0x02, (byte)0x02, (byte)0x42, (byte)0x42, (byte)0x02, (byte)0x02, (byte)0xc2, (byte)0xc2, (byte)0x02, (byte)0x02, (byte)0x42, (byte)0x42, (byte)0x02, (byte)0x02,
            (byte)0xd3, (byte)0xd3, (byte)0x02, (byte)0x03, (byte)0x63, (byte)0x43, (byte)0x63, (byte)0x03, (byte)0xe3, (byte)0xc3, (byte)0xe3, (byte)0x03, (byte)0x63, (byte)0x43, (byte)0x63, (byte)0x03,
            (byte)0x94, (byte)0xb4, (byte)0x94, (byte)0x65, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x84, (byte)0x84, (byte)0x84, (byte)0x84, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x04,
            (byte)0x95, (byte)0x95, (byte)0x95, (byte)0x95, (byte)0x04, (byte)0x05, (byte)0x25, (byte)0x05, (byte)0xe5, (byte)0x85, (byte)0xa5, (byte)0x85, (byte)0xe5, (byte)0x05, (byte)0x25, (byte)0x05,
            (byte)0xd6, (byte)0xb6, (byte)0x96, (byte)0xb6, (byte)0xd6, (byte)0x27, (byte)0x06, (byte)0x06, (byte)0xc6, (byte)0xc6, (byte)0x86, (byte)0x86, (byte)0xc6, (byte)0xc6, (byte)0x06, (byte)0x06,
            (byte)0xd7, (byte)0xd7, (byte)0x97, (byte)0x97, (byte)0xd7, (byte)0xd7, (byte)0x06, (byte)0x07, (byte)0xe7, (byte)0xc7, (byte)0xe7, (byte)0x87, (byte)0xe7, (byte)0xc7, (byte)0xe7, (byte)0x07,
            (byte)0x18, (byte)0x38, (byte)0x18, (byte)0x78, (byte)0x18, (byte)0x38, (byte)0x18, (byte)0xe9, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08,
            (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x19, (byte)0x08, (byte)0x09, (byte)0x29, (byte)0x09, (byte)0x69, (byte)0x09, (byte)0x29, (byte)0x09,
            (byte)0xda, (byte)0x3a, (byte)0x1a, (byte)0x3a, (byte)0x5a, (byte)0x3a, (byte)0x1a, (byte)0x3a, (byte)0xda, (byte)0x2b, (byte)0x0a, (byte)0x0a, (byte)0x4a, (byte)0x4a, (byte)0x0a, (byte)0x0a,
            (byte)0xdb, (byte)0xdb, (byte)0x1b, (byte)0x1b, (byte)0x5b, (byte)0x5b, (byte)0x1b, (byte)0x1b, (byte)0xdb, (byte)0xdb, (byte)0x0a, (byte)0x0b, (byte)0x6b, (byte)0x4b, (byte)0x6b, (byte)0x0b,
            (byte)0x9c, (byte)0xbc, (byte)0x9c, (byte)0x7c, (byte)0x1c, (byte)0x3c, (byte)0x1c, (byte)0x7c, (byte)0x9c, (byte)0xbc, (byte)0x9c, (byte)0x6d, (byte)0x0c, (byte)0x0c, (byte)0x0c, (byte)0x0c,
            (byte)0x9d, (byte)0x9d, (byte)0x9d, (byte)0x9d, (byte)0x1d, (byte)0x1d, (byte)0x1d, (byte)0x1d, (byte)0x9d, (byte)0x9d, (byte)0x9d, (byte)0x9d, (byte)0x0c, (byte)0x0d, (byte)0x2d, (byte)0x0d,
            (byte)0xde, (byte)0xbe, (byte)0x9e, (byte)0xbe, (byte)0xde, (byte)0x3e, (byte)0x1e, (byte)0x3e, (byte)0xde, (byte)0xbe, (byte)0x9e, (byte)0xbe, (byte)0xde, (byte)0x2f, (byte)0x0e, (byte)0x0e,
            (byte)0xdf, (byte)0xdf, (byte)0x9f, (byte)0x9f, (byte)0xdf, (byte)0xdf, (byte)0x1f, (byte)0x1f, (byte)0xdf, (byte)0xdf, (byte)0x9f, (byte)0x9f, (byte)0xdf, (byte)0xdf, (byte)0x0e, (byte)0x0f,
            (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x60, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0xe0, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0x60, (byte)0x00, (byte)0x20, (byte)0x00, (byte)0xf1
    };

    final static byte[] table2 = {
            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x00, (byte)0x01, (byte)0x23, (byte)0x01, (byte)0x67, (byte)0x01, (byte)0x23, (byte)0x01, (byte)0xef, (byte)0x01, (byte)0x23, (byte)0x01, (byte)0x67, (byte)0x01, (byte)0x23, (byte)0x01,
            (byte)0xdf, (byte)0x21, (byte)0x02, (byte)0x02, (byte)0x46, (byte)0x46, (byte)0x02, (byte)0x02, (byte)0xce, (byte)0xce, (byte)0x02, (byte)0x02, (byte)0x46, (byte)0x46, (byte)0x02, (byte)0x02,
            (byte)0xde, (byte)0xde, (byte)0x02, (byte)0x03, (byte)0x65, (byte)0x47, (byte)0x65, (byte)0x03, (byte)0xed, (byte)0xcf, (byte)0xed, (byte)0x03, (byte)0x65, (byte)0x47, (byte)0x65, (byte)0x03,
            (byte)0x9d, (byte)0xbf, (byte)0x9d, (byte)0x63, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x8c, (byte)0x8c, (byte)0x8c, (byte)0x8c, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x04,
            (byte)0x9c, (byte)0x9c, (byte)0x9c, (byte)0x9c, (byte)0x04, (byte)0x05, (byte)0x27, (byte)0x05, (byte)0xeb, (byte)0x8d, (byte)0xaf, (byte)0x8d, (byte)0xeb, (byte)0x05, (byte)0x27, (byte)0x05,
            (byte)0xdb, (byte)0xbd, (byte)0x9f, (byte)0xbd, (byte)0xdb, (byte)0x25, (byte)0x06, (byte)0x06, (byte)0xca, (byte)0xca, (byte)0x8e, (byte)0x8e, (byte)0xca, (byte)0xca, (byte)0x06, (byte)0x06,
            (byte)0xda, (byte)0xda, (byte)0x9e, (byte)0x9e, (byte)0xda, (byte)0xda, (byte)0x06, (byte)0x07, (byte)0xe9, (byte)0xcb, (byte)0xe9, (byte)0x8f, (byte)0xe9, (byte)0xcb, (byte)0xe9, (byte)0x07,
            (byte)0x19, (byte)0x3b, (byte)0x19, (byte)0x7f, (byte)0x19, (byte)0x3b, (byte)0x19, (byte)0xe7, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08,
            (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x08, (byte)0x09, (byte)0x2b, (byte)0x09, (byte)0x6f, (byte)0x09, (byte)0x2b, (byte)0x09,
            (byte)0xd7, (byte)0x39, (byte)0x1b, (byte)0x39, (byte)0x5f, (byte)0x39, (byte)0x1b, (byte)0x39, (byte)0xd7, (byte)0x29, (byte)0x0a, (byte)0x0a, (byte)0x4e, (byte)0x4e, (byte)0x0a, (byte)0x0a,
            (byte)0xd6, (byte)0xd6, (byte)0x1a, (byte)0x1a, (byte)0x5e, (byte)0x5e, (byte)0x1a, (byte)0x1a, (byte)0xd6, (byte)0xd6, (byte)0x0a, (byte)0x0b, (byte)0x6d, (byte)0x4f, (byte)0x6d, (byte)0x0b,
            (byte)0x95, (byte)0xb7, (byte)0x95, (byte)0x7b, (byte)0x1d, (byte)0x3f, (byte)0x1d, (byte)0x7b, (byte)0x95, (byte)0xb7, (byte)0x95, (byte)0x6b, (byte)0x0c, (byte)0x0c, (byte)0x0c, (byte)0x0c,
            (byte)0x94, (byte)0x94, (byte)0x94, (byte)0x94, (byte)0x1c, (byte)0x1c, (byte)0x1c, (byte)0x1c, (byte)0x94, (byte)0x94, (byte)0x94, (byte)0x94, (byte)0x0c, (byte)0x0d, (byte)0x2f, (byte)0x0d,
            (byte)0xd3, (byte)0xb5, (byte)0x97, (byte)0xb5, (byte)0xd3, (byte)0x3d, (byte)0x1f, (byte)0x3d, (byte)0xd3, (byte)0xb5, (byte)0x97, (byte)0xb5, (byte)0xd3, (byte)0x2d, (byte)0x0e, (byte)0x0e,
            (byte)0xd2, (byte)0xd2, (byte)0x96, (byte)0x96, (byte)0xd2, (byte)0xd2, (byte)0x1e, (byte)0x1e, (byte)0xd2, (byte)0xd2, (byte)0x96, (byte)0x96, (byte)0xd2, (byte)0xd2, (byte)0x0e, (byte)0x0f,
            (byte)0x00, (byte)0x22, (byte)0x00, (byte)0x66, (byte)0x00, (byte)0x22, (byte)0x00, (byte)0xee, (byte)0x00, (byte)0x22, (byte)0x00, (byte)0x66, (byte)0x00, (byte)0x22, (byte)0x00, (byte)0xfe
    };

    final static byte[] MaskV2PreDef = {
            (byte)0xB8, (byte)0xD5, (byte)0x3D, (byte)0xB2, (byte)0xE9, (byte)0xAF, (byte)0x78, (byte)0x8C, (byte)0x83, (byte)0x33, (byte)0x71, (byte)0x51, (byte)0x76, (byte)0xA0, (byte)0xCD, (byte)0x37,
            (byte)0x2F, (byte)0x3E, (byte)0x35, (byte)0x8D, (byte)0xA9, (byte)0xBE, (byte)0x98, (byte)0xB7, (byte)0xE7, (byte)0x8C, (byte)0x22, (byte)0xCE, (byte)0x5A, (byte)0x61, (byte)0xDF, (byte)0x68,
            (byte)0x69, (byte)0x89, (byte)0xFE, (byte)0xA5, (byte)0xB6, (byte)0xDE, (byte)0xA9, (byte)0x77, (byte)0xFC, (byte)0xC8, (byte)0xBD, (byte)0xBD, (byte)0xE5, (byte)0x6D, (byte)0x3E, (byte)0x5A,
            (byte)0x36, (byte)0xEF, (byte)0x69, (byte)0x4E, (byte)0xBE, (byte)0xE1, (byte)0xE9, (byte)0x66, (byte)0x1C, (byte)0xF3, (byte)0xD9, (byte)0x02, (byte)0xB6, (byte)0xF2, (byte)0x12, (byte)0x9B,
            (byte)0x44, (byte)0xD0, (byte)0x6F, (byte)0xB9, (byte)0x35, (byte)0x89, (byte)0xB6, (byte)0x46, (byte)0x6D, (byte)0x73, (byte)0x82, (byte)0x06, (byte)0x69, (byte)0xC1, (byte)0xED, (byte)0xD7,
            (byte)0x85, (byte)0xC2, (byte)0x30, (byte)0xDF, (byte)0xA2, (byte)0x62, (byte)0xBE, (byte)0x79, (byte)0x2D, (byte)0x62, (byte)0x62, (byte)0x3D, (byte)0x0D, (byte)0x7E, (byte)0xBE, (byte)0x48,
            (byte)0x89, (byte)0x23, (byte)0x02, (byte)0xA0, (byte)0xE4, (byte)0xD5, (byte)0x75, (byte)0x51, (byte)0x32, (byte)0x02, (byte)0x53, (byte)0xFD, (byte)0x16, (byte)0x3A, (byte)0x21, (byte)0x3B,
            (byte)0x16, (byte)0x0F, (byte)0xC3, (byte)0xB2, (byte)0xBB, (byte)0xB3, (byte)0xE2, (byte)0xBA, (byte)0x3A, (byte)0x3D, (byte)0x13, (byte)0xEC, (byte)0xF6, (byte)0x01, (byte)0x45, (byte)0x84,
            (byte)0xA5, (byte)0x70, (byte)0x0F, (byte)0x93, (byte)0x49, (byte)0x0C, (byte)0x64, (byte)0xCD, (byte)0x31, (byte)0xD5, (byte)0xCC, (byte)0x4C, (byte)0x07, (byte)0x01, (byte)0x9E, (byte)0x00,
            (byte)0x1A, (byte)0x23, (byte)0x90, (byte)0xBF, (byte)0x88, (byte)0x1E, (byte)0x3B, (byte)0xAB, (byte)0xA6, (byte)0x3E, (byte)0xC4, (byte)0x73, (byte)0x47, (byte)0x10, (byte)0x7E, (byte)0x3B,
            (byte)0x5E, (byte)0xBC, (byte)0xE3, (byte)0x00, (byte)0x84, (byte)0xFF, (byte)0x09, (byte)0xD4, (byte)0xE0, (byte)0x89, (byte)0x0F, (byte)0x5B, (byte)0x58, (byte)0x70, (byte)0x4F, (byte)0xFB,
            (byte)0x65, (byte)0xD8, (byte)0x5C, (byte)0x53, (byte)0x1B, (byte)0xD3, (byte)0xC8, (byte)0xC6, (byte)0xBF, (byte)0xEF, (byte)0x98, (byte)0xB0, (byte)0x50, (byte)0x4F, (byte)0x0F, (byte)0xEA,
            (byte)0xE5, (byte)0x83, (byte)0x58, (byte)0x8C, (byte)0x28, (byte)0x2C, (byte)0x84, (byte)0x67, (byte)0xCD, (byte)0xD0, (byte)0x9E, (byte)0x47, (byte)0xDB, (byte)0x27, (byte)0x50, (byte)0xCA,
            (byte)0xF4, (byte)0x63, (byte)0x63, (byte)0xE8, (byte)0x97, (byte)0x7F, (byte)0x1B, (byte)0x4B, (byte)0x0C, (byte)0xC2, (byte)0xC1, (byte)0x21, (byte)0x4C, (byte)0xCC, (byte)0x58, (byte)0xF5,
            (byte)0x94, (byte)0x52, (byte)0xA3, (byte)0xF3, (byte)0xD3, (byte)0xE0, (byte)0x68, (byte)0xF4, (byte)0x00, (byte)0x23, (byte)0xF3, (byte)0x5E, (byte)0x0A, (byte)0x7B, (byte)0x93, (byte)0xDD,
            (byte)0xAB, (byte)0x12, (byte)0xB2, (byte)0x13, (byte)0xE8, (byte)0x84, (byte)0xD7, (byte)0xA7, (byte)0x9F, (byte)0x0F, (byte)0x32, (byte)0x4C, (byte)0x55, (byte)0x1D, (byte)0x04, (byte)0x36,
            (byte)0x52, (byte)0xDC, (byte)0x03, (byte)0xF3, (byte)0xF9, (byte)0x4E, (byte)0x42, (byte)0xE9, (byte)0x3D, (byte)0x61, (byte)0xEF, (byte)0x7C, (byte)0xB6, (byte)0xB3, (byte)0x93, (byte)0x50,
    };
    public static boolean KGMDetect(InputStream inputStream) throws Exception {
        final byte[] KGMMagicHeader = {0x7c, (byte) 0xd5,0x32, (byte) 0xeb, (byte) 0x86,0x02,0x7f,0x4b, (byte) 0xa8, (byte) 0xaf, (byte) 0xa6, (byte) 0x8e,0x0f, (byte) 0xff, (byte) 0x99,0x14};
        byte[] fileHeader = new byte[16];
        inputStream.read(fileHeader,0,16);
        if (Arrays.equals(fileHeader, KGMMagicHeader)) {
            System.out.println("KGM file detected");
            return true;
        } else {
            System.out.println("KGM file not detected");
            return false;
        }
    }

    public static int decrypt(byte[] ownKeyBytes,byte[] cipherDataBytes,int offset) {
        int i = offset;
        for (int j = 0; i < cipherDataBytes.length; ++i,++j) {
            int med8 = ownKeyBytes[i % 17] ^ cipherDataBytes[j];
            med8 ^= (med8 & 0xf) << 4;

            int msk8 = getMask(i);
            msk8 ^= (msk8 & 0xf) << 4;
            cipherDataBytes[j] = (byte) (med8 ^ msk8);
        }
        return i;
    }
    public static void write(InputStream inputStream, OutputStream outputStream,String format,int offset) throws Exception {
        int bufferSize = 8 * 1024 * 1024;
        if (bufferSize < inputStream.available()) {
            bufferSize = inputStream.available();
        }
        byte[] buffer = new byte[bufferSize];
        if (Objects.equals(format, "flac")){
            outputStream.write(0x66);
        } else if (Objects.equals(format,"mp3")) {
            outputStream.write(0x49);
        }
        int pos = offset;
        while (inputStream.read(buffer) != -1) {
            pos += decrypt(ownKeyBytes,buffer,pos);
            outputStream.write(buffer);
        }
    }

    public static String detectFormat(InputStream inputStream) throws Exception {
        byte[] headerLengthBytes = new byte[4];

        inputStream.read(headerLengthBytes, 0, 4);
        inputStream.skip(8);
        inputStream.read(ownKeyBytes, 0, 17);
        ownKeyBytes[16] = 0;

        int headerLength = LengthUtils.getLittleEndianInteger(headerLengthBytes);
        inputStream.skip(headerLength - 17 - 8 - 4 - 16);

        byte[] formatIdentifier = new byte[1];
        inputStream.read(formatIdentifier, 0, 1);
        decrypt(ownKeyBytes, formatIdentifier,0);
        if (formatIdentifier[0] == 0x66) {
            return "flac";
        } else if (formatIdentifier[0] == 0x49) {
            return "mp3";
        }
        return "";
    }


    public static int getMask(int pos){
        int offset = pos >> 4;
        int value = 0;
        while (offset >= 0x11) {
            value ^= table1[offset % 272];
            offset >>= 4;
            value ^= table2[offset % 272];
            offset >>= 4;
        };

        return MaskV2PreDef[pos % 272] ^ value;
    }
}
